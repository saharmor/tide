import React, { useState } from "react"
import "./App.css"
import NextImageTimer from "./NextImageTimer"
import Footer from "./Footer"
import Container from 'react-bootstrap/Container'
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col'
import Button from 'react-bootstrap/Button'
import Image from 'react-bootstrap/Image'
import Toggle from 'react-toggle'
import "react-toggle/style.css"
import SocialShare from "./SocialShare"
import imagesTest from "./images.json"

const Constants = {
  imageSwitchDurationHumanSec: 3,
  imageSwitchDurationAISec: 4,
  imagesPerBatch: 2,
}

const images = imagesTest.slice(0,5).sort(() => Math.random() - 0.5)

const App = () => {
  const [score, setScore] = useState(0);
  const [currImgIdx, setCurrImgIdx] = useState(0);
  const [isTimerActive, setIsTimerActive] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [isFastMode, setIsFastMode] = useState(true);
  const [isDalle, setIsDalle] = useState(false);
  const [isBatchFinished, setIsBatchFinished] = useState(false);


  function getImageSwitchDuration() {
    if (isBetweenStates()) {
      return 0
    }

    var tempTimeout = images[currImgIdx]["is_human"] ? Constants.imageSwitchDurationHumanSec : Constants.imageSwitchDurationAISec
    if (isFastMode) {
      return Math.floor(tempTimeout / 2)
    }
    return tempTimeout
  }


  function isBatchOver(){
    return (currImgIdx + 1) % Constants.imagesPerBatch === 0
  }

  function changeImage() {
    setIsTimerActive(true)
    setIsBatchFinished(false)
    return new Promise(res => setTimeout(function () {
      setIsDalle(false)
      if (!isBatchOver()) {
        setCurrImgIdx(previousValue => ++previousValue)
      } else{
        setIsBatchFinished(true)
      }
      setIsCorrect(false)
      setIsTimerActive(false)
    }, getImageSwitchDuration() * 1000)
    );
  }

  async function handleClick(btnName) {
    if (isTimerActive) {
      return
    }

    if ((images[currImgIdx]["is_human"] && btnName === "human") || (!images[currImgIdx]["is_human"] && btnName === "robot")) {
      // correct
      setScore(previousValue => ++previousValue)
      setIsCorrect(true)
    }
    if (images[currImgIdx]["on"] === "DALL-E 2") {
      setIsDalle(true)
    }

    await changeImage()
  }

  function getImageByText() {
    if (images[currImgIdx]["is_human"]) {
      return images[currImgIdx]["by"] + " on " + images[currImgIdx]["on"]
    }
    return images[currImgIdx]["by"] + " with " + images[currImgIdx]["on"]
  }

  function getImagePath() {
    if (!isDalle) {
      return "images/" + images[currImgIdx]["img"] + ".jpeg"
    }
    return "images/original/" + images[currImgIdx]["img"] + ".jpeg"
  }

  function renderPostClick() {
    return (
      <Row className={`${isTimerActive ? "visible" : "invisible"} pt-2"`}>
        <span className="text-muted small">By <a href={images[currImgIdx]['url']} target="_blank" rel="noopener noreferrer">{getImageByText()}</a></span>
        {!images[currImgIdx]["is_human"] && <span className="text-muted small">Prompt: {images[currImgIdx]["prompt"]}</span>}
        {isTimerActive && <NextImageTimer seconds={getImageSwitchDuration()} />}
        {!isTimerActive && <h4>easter egg is back</h4>}
      </Row>
    )
  }

  function playAgain(){
    setCurrImgIdx(previousValue => ++previousValue)
    setIsBatchFinished(false)
    setScore(0)
  }


  function isFinishedAll(){
    return currImgIdx >= images.length || (isBatchFinished && currImgIdx === images.length - 1)
  }

  function isBetweenStates(){
    return isBatchFinished || isFinishedAll()
  }

  function toggleFastMode() {
    setIsFastMode(previousValue => !previousValue)
  }

  return (
    <Container className="text-center justify-content-center align-items-center" fluid="md">
      <Row className="pt-4">
        <Col className="text-center"><span className="fs-1">This Image Does Not Exist</span></Col>
      </Row>
      <Row className="pt-1 pb-3">
        <Col className="text-center"><span className="fs-6 text-secondary">Can you tell if an image was generated by a human or a machine?</span></Col>
      </Row>

      {isBetweenStates() && <Row className="justify-content-center text-center">
        <Col xs={12}>Done! Your score: <h1 className="text-success">{score}</h1></Col>
        <Col xs={12}>Challenge your friends&nbsp;
          <SocialShare url={"https://thisimagedoesnotexist.com"} title={`Can you tell if an image was generated by a human or a machine? I scored ${score}!`} />
        </Col>
        {!isFinishedAll() && <Col xs={1} className="pt-2">
          <Button className="btn-sm" color="primary" onClick={playAgain}>Play again</Button>
        </Col>}
      </Row>
      }

      {!isBetweenStates() &&
        <Row className="justify-content-center align-items-center pb-2 py-4" xs={12} md={6} lg={6} sm={4}>
          <Col>
            <span className="small pe-2">Fast mode</span>
            <Toggle id='fast-mode' defaultChecked={isFastMode} onChange={toggleFastMode} />
          </Col>
        </Row>
      }

      {!isBetweenStates() && <Container>
        <Row className="justify-content-center">
          <Col>
            <Image src={getImagePath(isDalle)} className="img-fluid mx-auto d-block shadow" style={{ height: '18rem', borderRadius: "0.5rem" }} alt="Generated art" />
          </Col>
        </Row>

        <Row className="pt-2 justify-content-center">
          <Col>
            <span className={`${isCorrect ? "text-success fw-bolder fs-4" : ""}`}>Score: {score}</span>
          </Col>
        </Row>

        <Row className="justify-content-center">
          <Col lg={2} md={3} xs={4} sm={3}><Button className="btn-xlarge" disabled={isTimerActive && images[currImgIdx]["is_human"]} variant="outlined" onClick={() => handleClick('robot')}><span role="img" aria-label="robot">ü§ñ</span></Button></Col>
          <Col lg={2} md={3} xs={4} sm={3}><Button className="btn-xlarge" disabled={isTimerActive && !images[currImgIdx]["is_human"]} variant="outlined" onClick={() => handleClick('human')}><span role="img" aria-label="human">üë©‚Äçüé®</span></Button></Col>
        </Row>
        {renderPostClick()}
      </Container>
      }
      
      <Footer/>
    </Container>
  );
}

export default App
