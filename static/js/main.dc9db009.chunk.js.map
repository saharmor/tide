{"version":3,"sources":["Footer.js","GameActions.js","utils.js","SocialShare.js","DoneScreen.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Container","Row","className","href","target","rel","GameActions","handleClick","isCorrect","isTimerActive","useState","isRobotSelected","setIsRobotSelected","handleClickInternally","btnType","Col","lg","md","xs","sm","Button","disabled","variant","onClick","role","aria-label","a","fetch","then","response","json","data","trackEvent","category","action","label","value","ReactGA","event","SocialShare","url","title","sessionId","TwitterShareButton","beforeOnClick","TwitterIcon","size","round","FacebookShareButton","quote","FacebookIcon","RedditShareButton","RedditIcon","DoneScreen","isFinishedAll","score","playAgain","emailUrl","window","open","Constants","humanImages","imagesJson","filter","item","is_human","sort","Math","random","machineImages","totalImgCount","length","uuidv4","loca","getLoca","val","initialize","titleCase","gaOptions","userId","send","App","setScore","doneImgsCount","setDoneImgsCount","currHumanIdx","setCurrHumanIdx","currMachineIdx","setCurrMachineIdx","currImg","setCurrImg","isDalleOrImagen","setIsDalleOrImagen","setIsTimerActive","setIsCorrect","isBatchFinished","setIsBatchFinished","moveNextImage","randomResult","previousValue","getNextImage","changeImage","isAnswerCorrect","Promise","setTimeout","isBetweenStates","saveDB","paramsString","method","body","getSaveParams","params","JSON","stringify","btnName","fluid","Image","src","style","height","borderRadius","alt","Boolean","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc9db009.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\nconst Footer = () => {\n    return (\n        <Container>\n            <Row className=\"mt-5 justify-content-center text-center\">\n                <hr className=\"hr\"></hr>\n            </Row>\n            <Row>\n                <span className=\"small text-secondary\">Created by Sahar Mor to increase awareness of generative AI. Follow <a href=\"https://aitidbits.substack.com/?utm_source=thisimagedoesnotexist.com\" target=\"_blank\" rel=\"noopener noreferrer\">AI Tidbits</a> to stay ahead on AI.</span>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Footer;\n","\nimport React, { useState } from \"react\";\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nconst GameActions = ({ handleClick, isCorrect, isTimerActive }) => {\n    const [isRobotSelected, setIsRobotSelected] = useState(false);\n\n    function getRobotButton() {\n        if (!isTimerActive || !isRobotSelected) {\n            return <span role=\"img\" aria-label=\"robot\">🤖</span>\n        }\n        \n        if (isCorrect) {\n            return <span role=\"img\" aria-label=\"correct\">✅</span>\n        }\n        return <span role=\"img\" aria-label=\"wrong\">❌</span>\n    }\n\n    function getHumanButton() {\n        if (!isTimerActive || isRobotSelected) {\n            return <span role=\"img\" aria-label=\"human\">👩‍🎨</span>\n        }\n\n        if (isCorrect) {\n            return <span role=\"img\" aria-label=\"correct\">✅</span>\n        }\n        return <span role=\"img\" aria-label=\"wrong\">❌</span>\n    }\n\n    function handleClickInternally(btnType) {\n        handleClick(btnType)\n        setIsRobotSelected(btnType === 'robot')\n    }\n\n\n    return (\n        <Row className=\"justify-content-center\">\n            <Col lg={2} md={3} xs={4} sm={3}>\n                <Button className=\"btn-xlarge\" disabled={isTimerActive} variant=\"outlined\" onClick={() => handleClickInternally('robot')}>\n                    {getRobotButton()}\n                </Button>\n            </Col>\n            <Col lg={2} md={3} xs={4} sm={3}>\n                <Button className=\"btn-xlarge\" disabled={isTimerActive} variant=\"outlined\" onClick={() => handleClickInternally('human')}>\n                    {getHumanButton()}\n                </Button>\n            </Col>\n        </Row>\n    );\n\n}\n\nexport default GameActions;\n","import ReactGA from 'react-ga4'\n\nexport async function getLoca() {\n    return await fetch('https://ipapi.co/json/')\n        .then(response => response.json())\n        .then(data => {\n            return [data[\"country\"], data[\"city\"]]\n        })\n}\n\n\nexport function trackEvent(category, action, label, value) {\n    ReactGA.event({ category, action, label, value });\n}","import React from \"react\";\nimport {FacebookShareButton, RedditShareButton, TwitterShareButton, TwitterIcon, FacebookIcon, RedditIcon} from \"react-share\";\n\nimport { trackEvent } from \"./utils\"\n\nconst SocialShare = ({ url, title,sessionId }) => {\n    return (\n        <span>\n        <TwitterShareButton url={url} title={title + \" #dalle\"} beforeOnClick={(() => trackEvent('social', 'share_twitter', sessionId))}>\n          <TwitterIcon size={24} round />\n        </TwitterShareButton>\n        &nbsp;\n        <FacebookShareButton url={url} quote={title} beforeOnClick={(() => trackEvent('social', 'share_facebook', sessionId))}>\n          <FacebookIcon size={24} round />\n        </FacebookShareButton>\n        &nbsp;\n        <RedditShareButton url={url} title={title} beforeOnClick={(() => trackEvent('social', 'share_reddit', sessionId))}>\n          <RedditIcon size={24} round />\n        </RedditShareButton>\n        </span>\n    );\n\n}\n\nexport default SocialShare;\n","import React from \"react\";\nimport SocialShare from \"./SocialShare\"\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\n\nconst DoneScreen = ({ isFinishedAll, score, playAgain, emailUrl, sessionId }) => {\n  const openInNewTab = (url) => {\n    window.open(url, '_blank', 'noreferrer');\n  };\n\n\n  return (\n    <Row className=\"justify-content-center text-center\">\n      <Col xs={12}>Done! Your score: <h1 className=\"text-success\">{score}</h1></Col>\n      <Col xs={12}>Challenge your friends&nbsp;\n        <SocialShare sessionId={sessionId} url={\"https://thisimagedoesnotexist.com\"}\n          title={`Can you tell if an image was generated by a human or a machine? I scored ${score}!`} />\n      </Col>\n      <Row className=\"my-3 justify-content-center\">\n        <Col xs={12} className=\"justify-content-center align-items-center d-flex\">\n          <span className=\"text-muted\">Consider supporting this project to keep it running</span>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={12} className=\"flex-grow-1 align-items-center mb-1\">\n          <Button className=\"btn-large\" variant=\"primary\" onClick={() => openInNewTab('https://donate.stripe.com/9AQbKN6QxeJP8Pm001')}>Donate <span role=\"img\" aria-label=\"heart\">❤️</span></Button>\n        </Col>\n        {!isFinishedAll && <Col xs={12} className=\"pt-2\">\n          <Button className=\"btn-large\" variant=\"outline-primary\" onClick={playAgain}>Play again with new images</Button>\n        </Col>\n        }\n      </Row>\n    </Row>\n  );\n\n}\n\nexport default DoneScreen;\n","import React, { useState } from \"react\"\nimport \"./App.css\"\nimport imagesJson from \"./images.json\"\nimport Footer from \"./Footer\"\nimport GameActions from \"./GameActions\"\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Image from 'react-bootstrap/Image'\n\nimport { v4 as uuidv4 } from 'uuid'\nimport { getLoca, trackEvent } from \"./utils\"\nimport ReactGA from 'react-ga4'\nimport DoneScreen from \"./DoneScreen\"\n\nconst Constants = {\n  imageSwitchDurationHumanSec: 2,\n  imageSwitchDurationAISec: 2,\n  imagesPerBatch: 30,\n  remoteLmbda: 'https://7tknlfte8j.execute-api.us-west-1.amazonaws.com',\n  remoteLmbdaEm: 'https://7tknlfte8j.execute-api.us-west-1.amazonaws.com/capture-email',\n}\nconst humanImages = imagesJson.filter((item) => item.is_human).sort(() => Math.random() - 0.5)\nconst machineImages = imagesJson.filter((item) => !item.is_human).sort(() => Math.random() - 0.5)\nconst totalImgCount = humanImages.length + machineImages.length\n\nconst sessionId = uuidv4()\nvar loca = getLoca().then(val => {\n  loca = val\n})\n\nReactGA.initialize('G-38F95VBLHV', {\n  titleCase: false,\n  gaOptions: {\n    userId: sessionId\n  }\n});\nReactGA.send(\"pageview\");\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [doneImgsCount, setDoneImgsCount] = useState(0);\n  const [currHumanIdx, setCurrHumanIdx] = useState(0);\n  const [currMachineIdx, setCurrMachineIdx] = useState(1);\n\n  const [currImg, setCurrImg] = useState(machineImages[0]);\n  const [isDalleOrImagen, setIsDalleOrImagen] = useState(false);\n\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isBatchFinished, setIsBatchFinished] = useState(false);\n\n\n  function getImageSwitchDuration() {\n    if (isBetweenStates()) {\n      return 0\n    }\n\n    return currImg[\"is_human\"] ? Constants.imageSwitchDurationHumanSec : Constants.imageSwitchDurationAISec\n  }\n\n  function isBatchOver() {\n    return doneImgsCount !== 0 && ((doneImgsCount + 1) % Constants.imagesPerBatch === 0)\n  }\n\n  function moveNextImage() {\n    setCurrImg(getNextImage())\n  }\n\n  function getNextImage() {\n    const randomResult = Math.random() < 0.5\n    if (currMachineIdx < machineImages.length && ((currHumanIdx === humanImages.length - 1) || randomResult)) {\n      setCurrMachineIdx(previousValue => ++previousValue)\n      return machineImages[currMachineIdx]\n    } else {\n      setCurrHumanIdx(previousValue => ++previousValue)\n      return humanImages[currHumanIdx]\n    }\n  }\n\n  function changeImage(isAnswerCorrect) {\n    setIsTimerActive(true)\n    setIsBatchFinished(false)\n\n    return new Promise(() => setTimeout(function () {\n      setIsDalleOrImagen(false)\n      setDoneImgsCount(previousValue => ++previousValue)\n      if (!isBatchOver()) {\n        moveNextImage()\n      } else {\n        if (isAnswerCorrect) {\n          trackEvent('gameplay', 'finished_batch', sessionId, score + 1)\n        }\n        trackEvent('gameplay', 'finished_batch', sessionId, score)\n        setIsBatchFinished(true)\n      }\n      setIsCorrect(false)\n      setIsTimerActive(false)\n    }, getImageSwitchDuration() * 1000)\n    );\n  }\n\n  async function saveDB(paramsString) {\n    await fetch(Constants.remoteLmbda, { // TODO handle errors\n      method: 'POST',\n      body: paramsString,\n    })\n  }\n\n  function getSaveParams() {\n    const params = {\n      \"imageId\": currImg[\"id\"],\n      \"runningNum\": currImg[\"running_num\"],\n      \"url\": currImg[\"url\"],\n      \"isHuman\": currImg[\"is_human\"],\n      \"isCorrect\": isCorrect,\n      \"sessionId\": sessionId,\n      \"locaCount\": loca[0],\n      \"locaCit\": loca[1],\n    }\n\n    return JSON.stringify(params)\n  }\n\n  async function handleClick(btnName) {\n    if (isTimerActive) {\n      return\n    }\n\n    const isAnswerCorrect = (currImg[\"is_human\"] && btnName === \"human\") || (!currImg[\"is_human\"] && btnName === \"robot\")\n    if (isAnswerCorrect) {\n      // correct\n      setScore(previousValue => ++previousValue)\n      setIsCorrect(true)\n      trackEvent('gameplay', 'choice_correct', currImg[\"id\"])\n    } else {\n      setIsCorrect(false)\n      trackEvent('gameplay', 'choice_wrong', currImg[\"id\"])\n    }\n\n    if (currImg[\"on\"] === \"DALL-E 2\" || currImg[\"on\"] === \"Imagen\") {\n      setIsDalleOrImagen(true)\n    }\n\n    saveDB(getSaveParams())\n    await changeImage(isAnswerCorrect)\n  }\n\n  function getImageByText() {\n    if (currImg[\"is_human\"]) {\n      return currImg[\"by\"] + \" on \" + currImg[\"on\"]\n    }\n    return currImg[\"by\"] + \" with \" + currImg[\"on\"]\n  }\n\n  function getImagePath() {\n    if (!isDalleOrImagen) {\n      return \"images/\" + currImg[\"running_num\"] + \".jpeg\"\n    }\n    return \"images/original/\" + currImg[\"running_num\"] + \".jpeg\"\n  }\n\n  function renderPostClick() {\n    return (\n      <Row className={`pt-2\" fs-4 prompt-height`}>\n        <span className=\"text-muted small\">By <a href={currImg['url']} target=\"_blank\" rel=\"noopener noreferrer\">{getImageByText()}</a></span>\n        {!currImg[\"is_human\"] && <span className=\"text-muted small\">Instruction: {currImg[\"prompt\"]}</span>}\n      </Row>\n    )\n  }\n\n  function playAgain() {\n    trackEvent('gameplay', 'play_again', sessionId)\n    moveNextImage()\n    setIsBatchFinished(false)\n    setScore(0)\n  }\n\n  function isFinishedAll() {\n    return doneImgsCount === totalImgCount\n  }\n\n  function isBetweenStates() {\n    return isBatchFinished || isFinishedAll()\n  }\n\n  function getImagesLeftCount() {\n    // check if last batch\n    if ((totalImgCount - doneImgsCount < Constants.imagesPerBatch) && (totalImgCount % Constants.imagesPerBatch !== 0)) {\n      return totalImgCount % Constants.imagesPerBatch\n    }\n\n    return Constants.imagesPerBatch\n  }\n\n\n  return (\n    <Container className=\"text-center justify-content-center align-items-center\" fluid=\"md\">\n      <Row className=\"pt-4\">\n        <Col className=\"text-center\"><span className=\"fs-1\">This Image Does Not Exist</span></Col>\n      </Row>\n      <Row className=\"pt-1 pb-3 justify-content-center\">\n        <Col lg={5} md={6} sm={6} xs={10}><span className=\"fs-6 text-secondary\">Can you tell if an image was generated by a human or a machine? The average score is 18</span></Col>\n      </Row>\n\n      {isBetweenStates() && <DoneScreen isFinishedAll={isFinishedAll()} score={score} playAgain={playAgain}\n        emailUrl={Constants.remoteLmbdaEm} sessionId={sessionId} />}\n\n      {!isBetweenStates() &&\n        <Row className=\"justify-content-center align-items-center pb-2 py-4\" xs={12} md={6} lg={6} sm={4}>\n          <Col>\n            <span className=\"small\">{doneImgsCount % Constants.imagesPerBatch + 1}/{getImagesLeftCount()}</span>\n          </Col>\n        </Row>\n      }\n\n      {!isBetweenStates() && <Container>\n        <Row className=\"justify-content-center\">\n          <Col>\n            <Image src={getImagePath(isDalleOrImagen)} className=\"img-fluid mx-auto d-block shadow\" style={{ height: '18rem', borderRadius: \"0.5rem\" }} alt=\"Generated art\" />\n          </Col>\n        </Row>\n\n        <Row className=\"pt-2 justify-content-center\">\n          <Col>\n            <span className={`${isCorrect ? \"text-success fw-bolder fs-3\" : \"fs-5\"}`}>Score: {score}</span>\n          </Col>\n        </Row>\n\n        <GameActions handleClick={handleClick} isTimerActive={isTimerActive} isCorrect={isCorrect} />\n        {isTimerActive && renderPostClick()}\n      </Container>\n      }\n\n      <Footer />\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}