{"version":3,"sources":["NextImageTimer.js","SocialShare.js","App.js","serviceWorker.js","index.js"],"names":["NextImageTimer","seconds","useState","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","clearInterval","SocialShare","url","title","TwitterShareButton","TwitterIcon","size","round","FacebookShareButton","quote","FacebookIcon","RedditShareButton","RedditIcon","Constants","images","imagesTest","sort","Math","random","App","score","setScore","currImgIdx","setCurrImgIdx","isTimerActive","setIsTimerActive","isCorrect","setIsCorrect","isFastMode","setIsFastMode","isDalle","setIsDalle","getImageSwitchDuration","isFinished","tempTimeout","floor","changeImage","Promise","res","setTimeout","previousValue","handleClick","btnName","a","length","Container","className","fluid","Row","Col","xs","md","lg","sm","id","defaultChecked","onChange","Image","src","style","height","alt","Button","disabled","variant","onClick","role","aria-label","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d589cea8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst NextImageTimer = ({ seconds }) => {\n    const [timeLeft, setTimeLeft] = useState(seconds);\n\n    useEffect(() => {\n        if (!timeLeft) return;\n\n        const intervalId = setInterval(() => {\n            setTimeLeft(timeLeft - 1);\n        }, 1000);\n\n        return () => clearInterval(intervalId);\n    }, [timeLeft]);\n\n    return (\n        <h4>{timeLeft}</h4>\n    );\n\n}\n\nexport default NextImageTimer;\n","import React from \"react\";\nimport {FacebookShareButton, RedditShareButton, TwitterShareButton, TwitterIcon, FacebookIcon, RedditIcon} from \"react-share\";\n\n\nconst SocialShare = ({ url, title }) => {\n    return (\n        <span>\n        <TwitterShareButton url={url} title={title}>\n          <TwitterIcon size={24} round />\n        </TwitterShareButton>\n        &nbsp;\n        <FacebookShareButton url={url} quote={title}>\n          <FacebookIcon size={24} round />\n        </FacebookShareButton>\n        &nbsp;\n        <RedditShareButton url={url} title={title}>\n          <RedditIcon size={24} round />\n        </RedditShareButton>\n        </span>\n    );\n\n}\n\nexport default SocialShare;\n","import React, { useState } from \"react\"\nimport \"./App.css\"\nimport NextImageTimer from \"./NextImageTimer\"\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Image from 'react-bootstrap/Image'\nimport Toggle from 'react-toggle'\nimport \"react-toggle/style.css\"\nimport SocialShare from \"./SocialShare\"\nimport imagesTest from \"./images.json\"\n\nconst Constants = {\n  imageSwitchDurationHumanSec: 3,\n  imageSwitchDurationAISec: 4,\n}\n\nconst images = imagesTest.sort(() => Math.random() - 0.5)\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [currImgIdx, setCurrImgIdx] = useState(0);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isFastMode, setIsFastMode] = useState(false);\n  const [isDalle, setIsDalle] = useState(false);\n\n\n  function getImageSwitchDuration() {\n    if (isFinished()) {\n      return 0\n    }\n    var tempTimeout = images[currImgIdx][\"is_human\"] ? Constants.imageSwitchDurationHumanSec : Constants.imageSwitchDurationAISec\n    if (isFastMode) {\n      return Math.floor(tempTimeout / 2)\n    }\n    return tempTimeout\n  }\n\n\n  function changeImage() {\n    setIsTimerActive(true)\n    return new Promise(res => setTimeout(function () {\n      setIsDalle(false)\n      setCurrImgIdx(previousValue => ++previousValue)\n      setIsCorrect(false)\n      setIsTimerActive(false)\n    }, getImageSwitchDuration() * 1000)\n    );\n  }\n\n  async function handleClick(btnName) {\n    if (isTimerActive) {\n      return\n    }\n\n    if ((images[currImgIdx][\"is_human\"] && btnName === \"human\") || (!images[currImgIdx][\"is_human\"] && btnName === \"robot\")) {\n      // correct\n      setScore(previousValue => ++previousValue)\n      setIsCorrect(true)\n    }\n    if (images[currImgIdx][\"on\"] === \"DALL-E 2\"){\n      setIsDalle(true)\n    }\n    \n    await changeImage()\n  }\n\n  function getImageByText(){\n    if (images[currImgIdx][\"is_human\"]){\n      return images[currImgIdx][\"by\"] + \" on \" + images[currImgIdx][\"on\"]\n    }\n    return images[currImgIdx][\"by\"] + \" with \" + images[currImgIdx][\"on\"]\n  }\n\n  function getImagePath(){\n    if (!isDalle){\n      return \"images/\" + images[currImgIdx][\"img\"] + \".jpeg\"\n    }\n    return \"images/original/\" + images[currImgIdx][\"img\"] + \".jpeg\"\n  }\n  \n  function renderPostClick() {\n    return (\n      <Row className={`${isTimerActive ? \"visible\" : \"invisible\"} pt-2\"`}>\n        <span className=\"text-muted small\">By <a href={images[currImgIdx]['url']} target=\"_blank\" rel=\"noopener noreferrer\">{getImageByText()}</a></span>\n        {!images[currImgIdx][\"is_human\"] && <span className=\"text-muted small\">Prompt: {images[currImgIdx][\"prompt\"]}</span>}\n        {isTimerActive && <NextImageTimer seconds={getImageSwitchDuration()} />}\n        {!isTimerActive && <h4>easter egg is back</h4>}\n      </Row>\n    )\n  }\n\n  function isFinished() {\n    return currImgIdx >= images.length\n  }\n\n  function toggleFastMode() {\n    setIsFastMode(previousValue => !previousValue)\n  }\n\n  return (\n    <Container className=\"text-center justify-content-center align-items-center\" fluid=\"md\">\n      <Row className=\"pt-4\">\n        <Col className=\"text-center\"><span className=\"fs-1\">This Image Does Not Exist</span></Col>\n      </Row>\n      <Row className=\"pt-1 pb-3\">\n        <Col className=\"text-center\"><span className=\"fs-6 text-secondary\">Can you tell if an image was generated by a human or a machine?</span></Col>\n      </Row>\n\n      {!isFinished() &&\n        <Row className=\"justify-content-center align-items-center pb-2 py-4\" xs={12} md={6} lg={6} sm={4}>\n          <Col>\n            <span className=\"small pe-2\">Fast mode</span>\n            <Toggle id='fast-mode' defaultChecked={isFastMode} onChange={toggleFastMode} />\n          </Col>\n        </Row>\n      }\n\n\n      {isFinished() && <Row className=\"justify-content-center text-center\">\n        <Col xs={12}>Done! Your score: <h1 className=\"text-success\">{score}</h1></Col>\n        <Col xs={12}>Challenge your friends&nbsp;\n          <SocialShare url={\"https://thisimagedoesnotexist.com\"} title={`Can you tell if an image was generated by a human or a machine? I scored ${score}!`} />\n        </Col>\n      </Row>\n      }\n\n      {!isFinished() && <Container>\n        <Row className=\"justify-content-center\">\n          <Col>\n            <Image src={getImagePath(isDalle)} className=\"img-fluid rounded mx-auto d-block shadow\" style={{ height: '18rem' }} alt=\"Generated art\" />\n            {/* <Image src={images[currImgIdx][\"img\"]} className=\"img-fluid rounded mx-auto d-block shadow\" style={{ height: '18rem' }} alt=\"Generated art\" /> */}\n          </Col>\n        </Row>\n\n        {!isFinished() &&\n          <Row className=\"pt-2 justify-content-center\">\n            <Col>\n              <span className={`${isCorrect ? \"text-success fw-bolder fs-4\" : \"\"}`}>Score: {score}</span>\n            </Col>\n          </Row>\n        }\n\n        <Row className=\"justify-content-center\">\n          <Col lg={2} md={3} xs={4} sm={3}><Button className=\"btn-xlarge\" disabled={isTimerActive && images[currImgIdx][\"is_human\"]} variant=\"outlined\" onClick={() => handleClick('robot')}><span role=\"img\" aria-label=\"robot\">🤖</span></Button></Col>\n          <Col lg={2} md={3} xs={4} sm={3}><Button className=\"btn-xlarge\" disabled={isTimerActive && !images[currImgIdx][\"is_human\"]} variant=\"outlined\" onClick={() => handleClick('human')}><span role=\"img\" aria-label=\"human\">👩‍🎨</span></Button></Col>\n        </Row>\n        {renderPostClick()}\n      </Container>\n      }\n      <Row className=\"mt-3 justify-content-center text-center\">\n        <hr className=\"hr\"></hr>\n      </Row>\n\n      <Row>\n        <span className=\"small text-secondary\">Created by <a href=\"https://saharmor.me/?utm_source=thisimagedoesnotexist.com\" target=\"_blank\" rel=\"noopener noreferrer\">Sahar</a> to increase awareness</span>\n      </Row>\n      <Row>\n        <span className=\"small text-secondary\">Images generated by <a href=\"https://openai.com/dall-e-2/?utm_source=thisimagedoesnotexist.com\" target=\"_blank\" rel=\"noopener noreferrer\">DALL-E 2</a> and VQGAN generative models</span>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}