{"version":3,"sources":["Footer.js","SocialShare.js","GameActions.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Container","Row","className","href","target","rel","SocialShare","url","title","TwitterShareButton","TwitterIcon","size","round","FacebookShareButton","quote","FacebookIcon","RedditShareButton","RedditIcon","GameActions","handleClick","isCorrect","isTimerActive","useState","isRobotSelected","setIsRobotSelected","handleClickInternally","btnType","Col","lg","md","xs","sm","Button","disabled","variant","onClick","role","aria-label","Constants","images","imagesJson","sort","Math","random","sessionId","uuidv4","App","score","setScore","currImgIdx","setCurrImgIdx","setIsTimerActive","setIsCorrect","isDalle","setIsDalle","isBatchFinished","setIsBatchFinished","getNextImageIndex","changeImage","Promise","res","setTimeout","isBetweenStates","saveDB","a","params","fetch","method","body","JSON","stringify","btnName","previousValue","isFinishedAll","length","fluid","color","Image","src","style","height","borderRadius","alt","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ecfa90d2.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\nconst Footer = () => {\n    return (\n        <Container>\n            <Row className=\"mt-5 justify-content-center text-center\">\n                <hr className=\"hr\"></hr>\n            </Row>\n            <Row>\n                <span className=\"small text-secondary\">Images generated by <a href=\"https://openai.com/dall-e-2/?utm_source=thisimagedoesnotexist.com\" target=\"_blank\" rel=\"noopener noreferrer\">DALL-E 2</a> and VQGAN generative models</span>\n            </Row>\n            <Row>\n                <span className=\"small text-secondary\">Created by <a href=\"https://saharmor.me/?utm_source=thisimagedoesnotexist.com\" target=\"_blank\" rel=\"noopener noreferrer\">Sahar</a> to increase awareness</span>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport {FacebookShareButton, RedditShareButton, TwitterShareButton, TwitterIcon, FacebookIcon, RedditIcon} from \"react-share\";\n\n\nconst SocialShare = ({ url, title }) => {\n    return (\n        <span>\n        <TwitterShareButton url={url} title={title + \" #dalle\"}>\n          <TwitterIcon size={24} round />\n        </TwitterShareButton>\n        &nbsp;\n        <FacebookShareButton url={url} quote={title}>\n          <FacebookIcon size={24} round />\n        </FacebookShareButton>\n        &nbsp;\n        <RedditShareButton url={url} title={title}>\n          <RedditIcon size={24} round />\n        </RedditShareButton>\n        </span>\n    );\n\n}\n\nexport default SocialShare;\n","\nimport React, { useState } from \"react\";\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nconst GameActions = ({ handleClick, isCorrect, isTimerActive }) => {\n    const [isRobotSelected, setIsRobotSelected] = useState(false);\n\n    function getRobotButton() {\n        if (!isTimerActive || !isRobotSelected) {\n            return <span role=\"img\" aria-label=\"robot\">ü§ñ</span>\n        }\n        \n        if (isCorrect) {\n            return <span role=\"img\" aria-label=\"correct\">‚úÖ</span>\n        }\n        return <span role=\"img\" aria-label=\"wrong\">‚ùå</span>\n    }\n\n    function getHumanButton() {\n        if (!isTimerActive || isRobotSelected) {\n            return <span role=\"img\" aria-label=\"human\">üë©‚Äçüé®</span>\n        }\n\n        if (isCorrect) {\n            return <span role=\"img\" aria-label=\"correct\">‚úÖ</span>\n        }\n        return <span role=\"img\" aria-label=\"wrong\">‚ùå</span>\n    }\n\n    function handleClickInternally(btnType) {\n        handleClick(btnType)\n        setIsRobotSelected(btnType === 'robot')\n    }\n\n\n    return (\n        <Row className=\"justify-content-center\">\n            <Col lg={2} md={3} xs={4} sm={3}>\n                <Button className=\"btn-xlarge\" disabled={isTimerActive} variant=\"outlined\" onClick={() => handleClickInternally('robot')}>\n                    {getRobotButton()}\n                </Button>\n            </Col>\n            <Col lg={2} md={3} xs={4} sm={3}>\n                <Button className=\"btn-xlarge\" disabled={isTimerActive} variant=\"outlined\" onClick={() => handleClickInternally('human')}>\n                    {getHumanButton()}\n                </Button>\n            </Col>\n        </Row>\n    );\n\n}\n\nexport default GameActions;\n","import React, { useState } from \"react\"\nimport \"./App.css\"\nimport imagesJson from \"./images.json\"\nimport Footer from \"./Footer\"\nimport SocialShare from \"./SocialShare\"\nimport GameActions from \"./GameActions\"\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Image from 'react-bootstrap/Image'\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Constants = {\n  imageSwitchDurationHumanSec: 2,\n  imageSwitchDurationAISec: 2,\n  imagesPerBatch: 30,\n  remoteLmbda: 'https://7tknlfte8j.execute-api.us-west-1.amazonaws.com',\n}\n\nconst images = imagesJson.sort(() => Math.random() - 0.5)\nconst sessionId = uuidv4()\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [currImgIdx, setCurrImgIdx] = useState(0);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isDalle, setIsDalle] = useState(false);\n  const [isBatchFinished, setIsBatchFinished] = useState(false);\n\n  function getImageSwitchDuration() {\n    if (isBetweenStates()) {\n      return 0\n    }\n\n    return images[currImgIdx][\"is_human\"] ? Constants.imageSwitchDurationHumanSec : Constants.imageSwitchDurationAISec\n  }\n\n  function isBatchOver() {\n    return (currImgIdx + 1) % Constants.imagesPerBatch === 0\n  }\n\n  function getNextImageIndex() {\n    return currImgIdx + 1\n  }\n\n  function changeImage() {\n    setIsTimerActive(true)\n    setIsBatchFinished(false)\n    return new Promise(res => setTimeout(function () {\n      setIsDalle(false)\n      if (!isBatchOver()) {\n        setCurrImgIdx(getNextImageIndex())\n      } else {\n        setIsBatchFinished(true)\n      }\n      setIsCorrect(false)\n      setIsTimerActive(false)\n    }, getImageSwitchDuration() * 1000)\n    );\n  }\n\n  async function saveDB() {\n    const params = {\n      \"imageId\": images[currImgIdx][\"id\"],\n      \"runningNum\": images[currImgIdx][\"running_num\"],\n      \"url\": images[currImgIdx][\"url\"],\n      \"isHuman\": images[currImgIdx][\"is_human\"],\n      \"isCorrect\": isCorrect,\n      \"sessionId\": sessionId,\n    }\n\n    await fetch(Constants.remoteLmbda, { // TODO handle errors\n      method: 'POST',\n      body: JSON.stringify(params),\n    })\n  }\n\n  async function handleClick(btnName) {\n    if (isTimerActive) {\n      return\n    }\n\n    if ((images[currImgIdx][\"is_human\"] && btnName === \"human\") || (!images[currImgIdx][\"is_human\"] && btnName === \"robot\")) {\n      // correct\n      setScore(previousValue => ++previousValue)\n      setIsCorrect(true)\n    } else {\n      setIsCorrect(false)\n    }\n\n    if (images[currImgIdx][\"on\"] === \"DALL-E 2\") {\n      setIsDalle(true)\n    }\n    await changeImage()\n    await saveDB()\n  }\n\n  function getImageByText() {\n    if (images[currImgIdx][\"is_human\"]) {\n      return images[currImgIdx][\"by\"] + \" on \" + images[currImgIdx][\"on\"]\n    }\n    return images[currImgIdx][\"by\"] + \" with \" + images[currImgIdx][\"on\"]\n  }\n\n  function getImagePath() {\n    if (!isDalle) {\n      return \"images/\" + images[currImgIdx][\"running_num\"] + \".jpeg\"\n    }\n    return \"images/original/\" + images[currImgIdx][\"running_num\"] + \".jpeg\"\n  }\n\n  function renderPostClick() {\n    return (\n      <Row className={`pt-2\" fs-4 prompt-height`}>\n        <span className=\"text-muted small\">By <a href={images[currImgIdx]['url']} target=\"_blank\" rel=\"noopener noreferrer\">{getImageByText()}</a></span>\n        {!images[currImgIdx][\"is_human\"] && <span className=\"text-muted small\">Instruction: {images[currImgIdx][\"prompt\"]}</span>}\n      </Row>\n    )\n  }\n\n  function playAgain() {\n    setCurrImgIdx(getNextImageIndex())\n    setIsBatchFinished(false)\n    setScore(0)\n  }\n\n  function isFinishedAll() {\n    return currImgIdx >= images.length || (isBatchFinished && currImgIdx === images.length - 1)\n  }\n\n  function isBetweenStates() {\n    return isBatchFinished || isFinishedAll()\n  }\n\n  function getImagesLeftCount() {\n    // check if last batch\n    if (images.length - currImgIdx < Constants.imagesPerBatch) {\n      return images.length % Constants.imagesPerBatch\n    }\n\n    return Constants.imagesPerBatch\n  }\n\n  return (\n    <Container className=\"text-center justify-content-center align-items-center\" fluid=\"md\">\n      <Row className=\"pt-4\">\n        <Col className=\"text-center\"><span className=\"fs-1\">This Image Does Not Exist</span></Col>\n      </Row>\n      <Row className=\"pt-1 pb-3 justify-content-center\">\n        <Col lg={5} md={6} sm={6} xs={10}><span className=\"fs-6 text-secondary\">Can you tell if an image was generated by a human or a machine?</span></Col>\n      </Row>\n\n      {isBetweenStates() && <Row className=\"justify-content-center text-center\">\n        <Col xs={12}>Done! Your score: <h1 className=\"text-success\">{score}</h1></Col>\n        <Col xs={12}>Challenge your friends&nbsp;\n          <SocialShare url={\"https://thisimagedoesnotexist.com\"} title={`Can you tell if an image was generated by a human or a machine? I scored ${score}!`} />\n        </Col>\n        {!isFinishedAll() && <Col xs={8} className=\"pt-2\">\n          <Button className=\"btn-sm\" color=\"primary\" onClick={playAgain}>Play again with new images</Button>\n        </Col>}\n      </Row>\n      }\n\n      {!isBetweenStates() &&\n        <Row className=\"justify-content-center align-items-center pb-2 py-4\" xs={12} md={6} lg={6} sm={4}>\n          <Col>\n            <span className=\"small\">{currImgIdx % Constants.imagesPerBatch + 1}/{getImagesLeftCount()}</span>\n          </Col>\n        </Row>\n      }\n\n      {!isBetweenStates() && <Container>\n        <Row className=\"justify-content-center\">\n          <Col>\n            <Image src={getImagePath(isDalle)} className=\"img-fluid mx-auto d-block shadow\" style={{ height: '18rem', borderRadius: \"0.5rem\" }} alt=\"Generated art\" />\n          </Col>\n        </Row>\n\n        <Row className=\"pt-2 justify-content-center\">\n          <Col>\n            <span className={`${isCorrect ? \"text-success fw-bolder fs-3\" : \"fs-5\"}`}>Score: {score}</span>\n          </Col>\n        </Row>\n\n        <GameActions handleClick={handleClick} isTimerActive={isTimerActive} isCorrect={isCorrect} />\n        {isTimerActive && renderPostClick()}\n      </Container>\n      }\n\n      <Footer />\n    </Container>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}